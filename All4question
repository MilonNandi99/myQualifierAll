
//BAG PARADISE*********************************************************************************

public class BagInfo {

    private String customerName;
    private int bagId;
    private String bagBrand;
    private String bagType;
    private double bagPrice;
    
    public BagInfo() {
        super();
    }
    
    public BagInfo(String customerName, int bagId, String bagBrand, String bagType, double bagPrice) {
        super();
        this.customerName = customerName;
        this.bagId = bagId;
        this.bagBrand = bagBrand;
        this.bagType = bagType;
        this.bagPrice = bagPrice;
    }
    
    public String getCustomerName() {
        return customerName;
    }
    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }
    public int getBagId() {
        return bagId;
    }
    public void setBagId(int bagId) {
        this.bagId = bagId;
    }
    public String getBagBrand() {
        return bagBrand;
    }
    public void setBagBrand(String bagBrand) {
        this.bagBrand = bagBrand;
    }
    public String getBagType() {
        return bagType;
    }
    public void setBagType(String bagType) {
        this.bagType = bagType;
    }
    public double getBagPrice() {
        return bagPrice;
    }
    public void setBagPrice(double bagPrice) {
        this.bagPrice = bagPrice;
    }
    
    
    public double calculateTotalPrice()
    {
            //Fill the code
    // 	return 0;
    
        double amt=0;
            if(getBagPrice()>0)
            {
        if(getBagBrand().equalsIgnoreCase("AmericanTourister"))
        {
            amt=getBagPrice()-(getBagPrice()*0.15);
        }
        
        else if(getBagBrand().equalsIgnoreCase("Baggit"))
        {
            amt=getBagPrice()-(getBagPrice()*0.18);
        }
        
        else if(getBagBrand().equalsIgnoreCase("LouisVuitton"))
        {
            amt=getBagPrice()-(getBagPrice()*0.25);
        }	 	  	  	 		     	   	      	 	
        
        else if(getBagBrand().equalsIgnoreCase("Gucci"))
        {
            amt=getBagPrice()-(getBagPrice()*0.20);
        }
        
        else
        amt=-1;
            }
        else
        {
        amt=-1;
    }
        
        return amt;
    }
    }







import java.util.Scanner;

public class UserInteface {
	public static BagInfo extractDetails(String bagDetails)
	{
		//Fill the code
// 		return null;
        BagInfo r=new BagInfo();
		String[] d=bagDetails.split(":");
		
		BagInfo rd=new BagInfo(d[0],Integer.parseInt(d[1]),d[2],d[3],Double.parseDouble(d[4]));
		
		return rd;

	}

	public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
		//Fill the code
		
		System.out.println("Enter the Bag details");
		String details=sc.nextLine();
	    BagInfo rd=new BagInfo() ;
	    rd=extractDetails(details);
	    
	    double amt=rd.calculateTotalPrice();
	    if(amt>0)
        {
	        System.out.println("Bag Details");
	        System.out.println("Customer Name: "+rd.getCustomerName());
	        System.out.println("Bag ID: "+rd.getBagId());
	        System.out.println("Bag Brand: "+rd.getBagBrand());
	        System.out.println("Bag Type: "+rd.getBagType());
	        System.out.println("Bag Price: "+rd.getBagPrice());
	        System.out.println("Total Amount to be paid: "+amt);
        }	 	  	  	 		     	   	      	 	
        else
        {
	        System.out.println("Invalid Bag details"); 
        }
	}
}








//Doctor Details***************************************************************************

import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

public class DoctorMain {
	
	private Map<String,String> doctorDetailsMap = new HashMap<String,String>();
	
	public Map<String,String> getDoctorDetailsMap() {
		return doctorDetailsMap;
	}

	public void setDoctorDetailsMap(Map<String,String> doctorDetailsMap) {
		this.doctorDetailsMap = doctorDetailsMap;
	}
	public String findSpecialization(String doctorId){
		
		//Fill the code
		
		String value = null;
		if(doctorDetailsMap.containsKey(doctorId))
		{
			value=doctorDetailsMap.get(doctorId);
		}
		else
		{
		    return "Invalid doctor id";
		}
		
		return value;
		

	}	 	  	  	 		     	   	      	 	
	public List<String> findDoctorsBasedOnTheGivenSpecialization(String specialization) {
		
		//Fill the code
		
		List<String> list=new ArrayList<String>();
		// for(Entry<String, String> entry:doctorDetailsMap.entrySet())
		// {
		// 	if(entry.getValue().equalsIgnoreCase(specialization))
		// 	{
		// 		list.add(entry.getKey());
		// 	}
			
		// }
        for(String key:doctorDetailsMap.keySet()){
			if(doctorDetailsMap.get(key).equalsIgnoreCase(specialization)){
				list.add(key);
			}
		}

		return list;
		
	}
	
	

	public static void main(String args[]) {
	    
	   	//Main method is excluded from evaluation. You are free to write your own code or add lines of code to check the correctness of the functionalities.
		
		DoctorMain c = new DoctorMain();
		List<String> list1 = new ArrayList<String>();
		Map<String, String> map = new HashMap<String, String>();
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter number of records to be added:");
		int n = sc.nextInt();
		sc.nextLine();
		System.out.println("Enter the details (doctorId : specialization):");
		String[] doctorDetails = new String[n];
		for (int i = 0; i < n; i++) {
			doctorDetails[i] = sc.nextLine();
		}	 	  	  	 		     	   	      	 	

		for (int i = 0; i < doctorDetails.length; i++) {
			String[] a = doctorDetails[i].split(":");

			map.put(a[0], a[1]);

			c.setDoctorDetailsMap(map);
		}
		System.out.println("Enter the doctor id to be searched");
		String id = sc.next();
		sc.nextLine();

		String result = c.findSpecialization(id);
		if (result != null) {
			if (!result.equalsIgnoreCase("Invalid doctor id")) {
				System.out.println("The given doctor " + id + " is specialized in " + result);
			} else {
				System.out.println("Invalid doctor id");
			}

		} else {
			System.out.println("Invalid doctor id");
		}
		System.out.println("Enter the specialization to be searched");
		String specialization = sc.nextLine();
		list1 = c.findDoctorsBasedOnTheGivenSpecialization(specialization);
		if (list1 != null && list1.size() >= 1) {
			System.out.println("Doctors specialized in " + specialization + " are");
			for (String s : list1) {
				System.out.println(s);
			}
		} else {
			System.out.println("No doctors were found for the given specialization");
		}
	}
}	 	






//Recharged Month*******************************************


select customer_name,email_id,monthname(recharge_date) as "RECHARGE_MONTH"
from customer c join subscription s 
on c.phone_number=s.phone_number 
where expiry_date in 
(select min(expiry_date) from subscription)
order by customer_name;





//Customer Details based on Interest******************************

select a.customer_id,c.customer_name,a.account_no,a.account_type,a.initial_deposit,
a.interest,
((a.interest/(100)*a.initial_deposit)) as interest_amt from account_info as a join 
customer_personal_info as c on a.customer_id = c.customer_id order by a.customer_id asc;




    
    
